{"version":3,"sources":["utils.js","game/game.reducer.js","game/game.utils.js","game/components/Cell.jsx","game/components/GameField.jsx","game/components/Styled.js","game/index.jsx","App.jsx","index.js"],"names":["getFromTheme","themePath","arguments","length","undefined","props","path","split","theme","NEW_LEVEL","HIDDEN_CELL_HIDE","HIDDEN_CELL_SHOW","FIELD_HIDE","FIELD_SHOW","RESET_LEVEL","START_LEVEL","initialState","level","showHidden","showField","levelConfig","levels","GameReducer","state","action","type","merge","Object","objectSpread","WRONG_GUESSED_CELL","CORRECT_GUESSED_CELL","CellView","styled","div","_templateObject","_ref","size","_ref2","_ref3","space","ActiveCellView","_templateObject2","_ref4","width","FailedCellView","_templateObject3","_ref5","_ref6","Cell","memo","id","value","isActive","forceShowHidden","isFailed","react_default","a","createElement","FieldView","GameField_templateObject","animationState","Field","_ref3$fieldSize","fieldSize","_ref3$cellCount","cellCount","_ref3$space","_ref3$field","field","_ref3$hiddenCells","hiddenCells","_ref3$level","_ref3$showHidden","dispatch","updateLevel","visible","cellSize","_useGameField","_useState","useState","_useState2","slicedToArray","gameField","setField","_useState3","_useState4","gameHiddenCells","setHidden","onCellClick","target","Number","includes","updatedField","map","e","i","updatedHidden","filter","setTimeout","useGameField","useEffect","onClick","cellValue","Cell_Cell","key","GameView","Styled_templateObject","GameFieldView","Styled_templateObject2","SwitchView","Styled_templateObject3","toggleTheme","_useReducer","useReducer","_useReducer2","_useReducer2$","memoryCount","_useMemo","useMemo","cellsIndexes","toConsumableArray","Array","_","fill","rNum","Math","floor","random","toChange","splice","pop","push","generateGameField","es_default","GameField_Field","assign","shouldReset","App","_useTheme","defaultThemeName","themeName","setTheme","name","useTheme","_useTheme2","GlobalStyle","createGlobalStyle","App_templateObject","styled_components_browser_esm","themes","Fragment","style","textAlign","background","game","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d41c1053.chunk.js","sourcesContent":["import { path } from \"ramda\";\n\nexport function getFromTheme(themePath = \"\") {\n  return function getFromThemeProps(props = {}) {\n    return path(themePath.split(\".\"), props.theme);\n  };\n}\n\nexport function wait(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import { merge } from \"ramda\";\n\nimport levels from \"../config/levels\";\n\nexport const NEW_LEVEL = \"level/new\";\nexport const HIDDEN_CELL_HIDE = \"hidden/hide\";\nexport const HIDDEN_CELL_SHOW = \"hidden/show\";\nexport const FIELD_HIDE = \"field/hide\";\nexport const FIELD_SHOW = \"field/show\";\nexport const RESET_LEVEL = \"level/reset\";\n\nconst START_LEVEL = 0;\n\nexport const initialState = {\n  level: START_LEVEL,\n  showHidden: true,\n  showField: false,\n  levelConfig: levels[START_LEVEL]\n};\n\nexport function GameReducer(state, action) {\n  switch (action.type) {\n    case NEW_LEVEL:\n      return merge(state, {\n        level: action.level,\n        levelConfig: levels[action.level]\n      });\n    case HIDDEN_CELL_SHOW:\n      return merge(state, { showHidden: true });\n    case HIDDEN_CELL_HIDE:\n      return merge(state, { showHidden: false });\n    case FIELD_HIDE:\n      return merge(state, { showField: false });\n    case FIELD_SHOW:\n      return merge(state, { showField: true });\n    case RESET_LEVEL:\n      return merge(initialState, { levelConfig: { ...levels[START_LEVEL] } });\n    default:\n      return state;\n  }\n}\n","export function generateGameField(cellCount, memoryCount) {\n  const cellsIndexes = [...Array(cellCount * cellCount)].map((_, i) => i);\n  const field = [...cellsIndexes].fill(1);\n  const hiddenCells = [];\n\n  for (let i = 0; i < memoryCount; i++) {\n    const rNum = Math.floor(Math.random() * cellsIndexes.length);\n    const toChange = cellsIndexes.splice(rNum, 1).pop();\n\n    hiddenCells.push(toChange);\n    field[toChange] = 2;\n  }\n\n  return {\n    field,\n    hiddenCells\n  };\n}\n\nexport const WRONG_GUESSED_CELL = 0;\nexport const CORRECT_GUESSED_CELL = 3;\nexport const CELL = 1;\nexport const HIDDEN_CELL = 2;\n","import React, { memo } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getFromTheme } from \"../../utils\";\nimport { CORRECT_GUESSED_CELL, HIDDEN_CELL } from \"../game.utils\";\n\nconst CellView = styled.div`\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  background: ${getFromTheme(\"cell.bg\")};\n  margin: ${({ space }) => space}px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ActiveCellView = styled.div`\n  width: ${({ width }) => width}%;\n  height: 100%;\n  background: ${getFromTheme(\"cell.activeBg\")};\n  transition: width 0.2s ease;\n`;\n\nconst FailedCellView = styled.div`\n  width: ${({ size }) => size}%;\n  height: ${({ size }) => size}%;\n  background: ${getFromTheme(\"cell.failedBg\")};\n  transition: width 0.2s ease, height 0.2s ease;\n`;\n\nexport const Cell = memo(function Cell(props) {\n  const { id, value, forceShowHidden } = props;\n\n  const isActive =\n    (forceShowHidden && value === HIDDEN_CELL) ||\n    value === CORRECT_GUESSED_CELL;\n  const isFailed = !value;\n\n  return (\n    <CellView {...props}>\n      <ActiveCellView id={id} width={isActive ? 100 : 0} />\n      <FailedCellView id={id} size={isFailed ? 100 : 0} />\n    </CellView>\n  );\n});\n","import React, { memo, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport { HIDDEN_CELL_HIDE, HIDDEN_CELL_SHOW } from \"../game.reducer\";\nimport { Cell } from \"./Cell\";\nimport { WRONG_GUESSED_CELL, CORRECT_GUESSED_CELL } from \"../game.utils\";\n\nconst FieldView = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin: 20px 0;\n  opacity: ${({ animationState }) => animationState};\n  transform: scale(${({ animationState }) => animationState});\n  transition: opacity 0.2s ease, transform 0.3s ease;\n`;\n\nexport const Field = memo(function Field({\n  fieldSize = 0,\n  cellCount = 0,\n  space = 0,\n  field = [],\n  hiddenCells = [],\n  level = 0,\n  showHidden = false,\n  dispatch,\n  updateLevel,\n  visible\n}) {\n  const cellSize = fieldSize / cellCount - space;\n\n  const { gameField, onCellClick } = useGameField(\n    field,\n    hiddenCells,\n    updateLevel\n  );\n\n  useEffect(\n    () => {\n      dispatch({ type: HIDDEN_CELL_SHOW });\n      setTimeout(() => dispatch({ type: HIDDEN_CELL_HIDE }), 1500);\n    },\n    [level]\n  );\n\n  return (\n    <FieldView\n      animationState={visible ? 1 : 0}\n      onClick={!showHidden ? onCellClick : null}\n    >\n      {gameField.map((cellValue, i) => (\n        <Cell\n          size={cellSize}\n          space={space}\n          key={i}\n          id={i}\n          value={cellValue}\n          forceShowHidden={showHidden}\n        />\n      ))}\n    </FieldView>\n  );\n});\n\nfunction useGameField(field, hiddenCells, updateLevel) {\n  const [gameField, setField] = useState(field);\n  const [gameHiddenCells, setHidden] = useState(hiddenCells);\n\n  function onCellClick({ target }) {\n    const id = Number(target.id);\n\n    if (hiddenCells.includes(id)) {\n      const updatedField = gameField.map((e, i) =>\n        i === id ? CORRECT_GUESSED_CELL : e\n      );\n      const updatedHidden = gameHiddenCells.filter(e => e !== id);\n\n      setField(updatedField);\n      setHidden(updatedHidden);\n\n      return !updatedHidden.length && setTimeout(updateLevel, 1000);\n    }\n\n    const updatedField = gameField.map((e, i) =>\n      i === id ? WRONG_GUESSED_CELL : e\n    );\n    setField(updatedField);\n\n    return setTimeout(updateLevel, 1000, true);\n  }\n\n  return { gameField, onCellClick };\n}\n","import styled from \"styled-components\";\n\nexport const GameView = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 5px 0;\n`;\n\nexport const GameFieldView = styled.div`\n  width: ${({ fieldSize, cellCount, space }) =>\n    fieldSize + cellCount * space}px;\n  height: ${({ fieldSize, cellCount, space }) =>\n    fieldSize + cellCount * space}px;\n  margin: 20px 0;\n`;\n\nexport const SwitchView = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n`;\n","import React, { memo, useReducer, useMemo, useEffect } from \"react\";\n\nimport { Field } from \"./components/GameField\";\nimport { GameFieldView, GameView, SwitchView } from \"./components/Styled\";\nimport {\n  GameReducer,\n  initialState,\n  NEW_LEVEL,\n  FIELD_HIDE,\n  FIELD_SHOW,\n  RESET_LEVEL\n} from \"./game.reducer\";\nimport { generateGameField } from \"./game.utils\";\nimport Switch from \"rc-switch\";\n\nimport \"rc-switch/assets/index.css\";\n\nfunction Game({ toggleTheme }) {\n  const [{ level, showHidden, showField, levelConfig }, dispatch] = useReducer(\n    GameReducer,\n    initialState\n  );\n\n  const { cellCount, memoryCount } = levelConfig;\n\n  const { field, hiddenCells } = useMemo(\n    () => generateGameField(cellCount, memoryCount),\n    [levelConfig]\n  );\n\n  useEffect(() => setTimeout(dispatch, 500, { type: FIELD_SHOW }), [\n    levelConfig\n  ]);\n\n  function updateLevel(shouldReset) {\n    dispatch({ type: FIELD_HIDE });\n    setTimeout(dispatch, 500, {\n      type: shouldReset ? RESET_LEVEL : NEW_LEVEL,\n      level: level + 1\n    });\n  }\n\n  return (\n    <GameView>\n      <GameFieldView {...levelConfig}>\n        <SwitchView>\n          <div>Level: {level}</div>\n          <div>\n            Theme mode: <Switch onClick={toggleTheme} />\n          </div>\n        </SwitchView>\n        <Field\n          {...levelConfig}\n          levelConfig={levelConfig}\n          visible={showField}\n          key={field}\n          level={level}\n          field={field}\n          hiddenCells={hiddenCells}\n          dispatch={dispatch}\n          showHidden={showHidden}\n          updateLevel={updateLevel}\n        />\n      </GameFieldView>\n    </GameView>\n  );\n}\n\nexport default memo(Game);\n","import React, { useState } from 'react';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { getFromTheme } from './utils';\nimport './index.css';\n\nimport Game from './game';\nimport themes from './config/themes.json';\n\nfunction App() {\n  const [themeName, toggleTheme] = useTheme('darkTheme');\n\n  const GlobalStyle = createGlobalStyle`\n    body {\n        background: ${getFromTheme('body.bg')};\n        color: ${getFromTheme('body.color')};\n        transition: background .3s ease;\n    }\n  `;\n\n  return (\n    <ThemeProvider theme={themes[themeName]}>\n      <React.Fragment>\n        <div style={{\n          textAlign: 'center',\n          background: 'linear-gradient(45deg, #8A2387, #E94057,#F27121)'\n        }}>\n          <h1>Tfakkarni</h1>\n        </div>\n        <GlobalStyle />\n        <Game toggleTheme={toggleTheme} />\n      </React.Fragment>\n    </ThemeProvider>\n  );\n}\n\nfunction useTheme(defaultThemeName) {\n  const [themeName, setTheme] = useState(defaultThemeName);\n\n  function switchTheme(name) {\n    setTheme(themeName === 'darkTheme' ? 'lightTheme' : 'darkTheme');\n  }\n\n  return [themeName, switchTheme];\n}\n\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}